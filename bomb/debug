
rdi "input"
rsi "input"
rdx 6
rcx 2
r8 
r9 

%rsp+0 %r14 
%rsp+4
%rsp+8
%rsp+c
%rsp+10
%rsp+14

(gdb) x/24wd 0x6032d0  
0x6032d0 <node1>:       332     1       6304480 0
0x6032e0 <node2>:       168     2       6304496 0
0x6032f0 <node3>:       924     3       6304512 0
0x603300 <node4>:       691     4       6304528 0
0x603310 <node5>:       477     5       6304544 0
0x603320 <node6>:       443     6       0       0
(gdb) x/32wd 0x6032d0  
0x6032d0 <node1>:       332     1       6304480 0
0x6032e0 <node2>:       168     2       6304496 0
0x6032f0 <node3>:       924     3       6304512 0
0x603300 <node4>:       691     4       6304528 0
0x603310 <node5>:       477     5       6304544 0
0x603320 <node6>:       443     6       0       0
0x603330:       0       0       0       0
0x603340 <host_table>:  4204073 0       4204099 0


Dump of assembler code for function phase_6:
=> 0x00000000004010f4 <+0>:     push   %r14
   0x00000000004010f6 <+2>:     push   %r13
   0x00000000004010f8 <+4>:     push   %r12
   0x00000000004010fa <+6>:     push   %rbp
   0x00000000004010fb <+7>:     push   %rbx
   0x00000000004010fc <+8>:     sub    $0x50,%rsp
   0x0000000000401100 <+12>:    mov    %rsp,%r13
   0x0000000000401103 <+15>:    mov    %rsp,%rsi
   0x0000000000401106 <+18>:    callq  0x40145c <read_six_numbers>
   0x000000000040110b <+23>:    mov    %rsp,%r14
   0x000000000040110e <+26>:    mov    $0x0,%r12d
   0x0000000000401114 <+32>:    mov    %r13,%rbp
   0x0000000000401117 <+35>:    mov    0x0(%r13),%eax
   0x000000000040111b <+39>:    sub    $0x1,%eax
   0x000000000040111e <+42>:    cmp    $0x5,%eax
   0x0000000000401121 <+45>:    jbe    0x401128 <phase_6+52>
   0x0000000000401123 <+47>:    callq  0x40143a <explode_bomb>
   0x0000000000401128 <+52>:    add    $0x1,%r12d
   0x000000000040112c <+56>:    cmp    $0x6,%r12d
   0x0000000000401130 <+60>:    je     0x401153 <phase_6+95>
   0x0000000000401132 <+62>:    mov    %r12d,%ebx
   0x0000000000401135 <+65>:    movslq %ebx,%rax
   0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax
   0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp)
   0x000000000040113e <+74>:    jne    0x401145 <phase_6+81>
   0x0000000000401140 <+76>:    callq  0x40143a <explode_bomb>
   0x0000000000401145 <+81>:    add    $0x1,%ebx
   0x0000000000401148 <+84>:    cmp    $0x5,%ebx
   0x000000000040114b <+87>:    jle    0x401135 <phase_6+65>
   0x000000000040114d <+89>:    add    $0x4,%r13
   0x0000000000401151 <+93>:    jmp    0x401114 <phase_6+32>
   0x0000000000401153 <+95>:    lea    0x18(%rsp),%rsi
   0x0000000000401158 <+100>:   mov    %r14,%rax
   0x000000000040115b <+103>:   mov    $0x7,%ecx
   0x0000000000401160 <+108>:   mov    %ecx,%edx
   0x0000000000401162 <+110>:   sub    (%rax),%edx
   0x0000000000401164 <+112>:   mov    %edx,(%rax)
   0x0000000000401166 <+114>:   add    $0x4,%rax
   0x000000000040116a <+118>:   cmp    %rsi,%rax
   0x000000000040116d <+121>:   jne    0x401160 <phase_6+108>
   0x000000000040116f <+123>:   mov    $0x0,%esi
   0x0000000000401174 <+128>:   jmp    0x401197 <phase_6+163>
   0x0000000000401176 <+130>:   mov    0x8(%rdx),%rdx
   0x000000000040117a <+134>:   add    $0x1,%eax
   0x000000000040117d <+137>:   cmp    %ecx,%eax
   0x000000000040117f <+139>:   jne    0x401176 <phase_6+130>
   0x0000000000401181 <+141>:   jmp    0x401188 <phase_6+148>
   0x0000000000401183 <+143>:   mov    $0x6032d0,%edx
   0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2)
   0x000000000040118d <+153>:   add    $0x4,%rsi
   0x0000000000401191 <+157>:   cmp    $0x18,%rsi
   0x0000000000401195 <+161>:   je     0x4011ab <phase_6+183>
   0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx
   0x000000000040119a <+166>:   cmp    $0x1,%ecx
   0x000000000040119d <+169>:   jle    0x401183 <phase_6+143>
  0x000000000040119f <+171>:   mov    $0x1,%eax
   0x00000000004011a4 <+176>:   mov    $0x6032d0,%edx
   0x00000000004011a9 <+181>:   jmp    0x401176 <phase_6+130>
   0x00000000004011ab <+183>:   mov    0x20(%rsp),%rbx
   0x00000000004011b0 <+188>:   lea    0x28(%rsp),%rax
   0x00000000004011b5 <+193>:   lea    0x50(%rsp),%rsi
   0x00000000004011ba <+198>:   mov    %rbx,%rcx
   0x00000000004011bd <+201>:   mov    (%rax),%rdx
   0x00000000004011c0 <+204>:   mov    %rdx,0x8(%rcx)
   0x00000000004011c4 <+208>:   add    $0x8,%rax
   0x00000000004011c8 <+212>:   cmp    %rsi,%rax
   0x00000000004011cb <+215>:   je     0x4011d2 <phase_6+222>
   0x00000000004011cd <+217>:   mov    %rdx,%rcx
   0x00000000004011d0 <+220>:   jmp    0x4011bd <phase_6+201>
   0x00000000004011d2 <+222>:   movq   $0x0,0x8(%rdx)
   0x00000000004011da <+230>:   mov    $0x5,%ebp
   0x00000000004011df <+235>:   mov    0x8(%rbx),%rax
   0x00000000004011e3 <+239>:   mov    (%rax),%eax
   0x00000000004011e5 <+241>:   cmp    %eax,(%rbx)
   0x00000000004011e7 <+243>:   jge    0x4011ee <phase_6+250>
   0x00000000004011e9 <+245>:   callq  0x40143a <explode_bomb>
   0x00000000004011ee <+250>:   mov    0x8(%rbx),%rbx
   0x00000000004011f2 <+254>:   sub    $0x1,%ebp
   0x00000000004011f5 <+257>:   jne    0x4011df <phase_6+235>
   0x00000000004011f7 <+259>:   add    $0x50,%rsp
   0x00000000004011fb <+263>:   pop    %rbx
   0x00000000004011fc <+264>:   pop    %rbp
   0x00000000004011fd <+265>:   pop    %r12
   0x00000000004011ff <+267>:   pop    %r13
   0x0000000000401201 <+269>:   pop    %r14
   0x0000000000401203 <+271>:   retq   
End of assembler dump.


<+12>:    mov    %rsp,%r13                          r13 = rsp
<+15>:    mov    %rsp,%rsi                          rsi = rsp
<+18>:    callq  0x40145c <read_six_numbers>        
<+23>:    mov    %rsp,%r14                          r14 = rsp
<+26>:    mov    $0x0,%r12d                         r12 = 0
<+32>:    mov    %r13,%rbp                     32:  rbp = r13
<+35>:    mov    0x0(%r13),%eax                     eax = r13[0]
<+39>:    sub    $0x1,%eax                          eax--
<+42>:    cmp    $0x5,%eax                          if(eax<=5)
<+45>:    jbe    0x401128 <phase_6+52>                  goto 52
<+47>:    callq  0x40143a <explode_bomb>            exit()
<+52>:    add    $0x1,%r12d                    52:      r12++
<+56>:    cmp    $0x6,%r12d                         if(r12==6)
<+60>:    je     0x401153 <phase_6+95>                  goto  95
<+62>:    mov    %r12d,%ebx                         ebx = r12
<+65>:    movslq %ebx,%rax                          rax = (int)ebx
<+68>:    mov    (%rsp,%rax,4),%eax                 eax = rsp[rax*4]
<+71>:    cmp    %eax,0x0(%rbp)                     if(rbp[0]!=eax)
<+74>:    jne    0x401145 <phase_6+81>                  goto 81
<+76>:    callq  0x40143a <explode_bomb>            exit()
<+81>:    add    $0x1,%ebx                          ebx++
<+84>:    cmp    $0x5,%ebx                          if(ebx<=5)
<+87>:    jle    0x401135 <phase_6+65>                  goto 65
<+89>:    add    $0x4,%r13                          r13+=4
<+93>:    jmp    0x401114 <phase_6+32>              goto 32
<+95>:    lea    0x18(%rsp),%rsi                    rsi = &(rsp[0x18])
<+100>:   mov    %r14,%rax                          rax = r14
<+103>:   mov    $0x7,%ecx                          ecx = 7
<+108>:   mov    %ecx,%edx                   108:   edx = ecx
<+110>:   sub    (%rax),%edx                        edx -= *rax
<+112>:   mov    %edx,(%rax)                        *rax = edx
<+114>:   add    $0x4,%rax                          rax += 4
<+118>:   cmp    %rsi,%rax                          if(rax != rsi)
<+121>:   jne    0x401160 <phase_6+108>                 goto 108
<+123>:   mov    $0x0,%esi                          esi = 0
<+128>:   jmp    0x401197 <phase_6+163>             goto 163


<+130>:   mov    0x8(%rdx),%rdx             130:    rdx = rdx[0x8]
<+134>:   add    $0x1,%eax                          eax++
<+137>:   cmp    %ecx,%eax                          if(eax!=ecx)
<+139>:   jne    0x401176 <phase_6+130>                 goto 130
<+141>:   jmp    0x401188 <phase_6+148>             goto 148
<+143>:   mov    $0x6032d0,%edx             143:    edx = 0x6032d0
<+148>:   mov    %rdx,0x20(%rsp,%rsi,2)     148:    rsp[20+2*rsi] = rdx
<+153>:   add    $0x4,%rsi                          rsi+=4
<+157>:   cmp    $0x18,%rsi                         if(rsi==0x18)
<+161>:   je     0x4011ab <phase_6+183>                 goto 183

<+163>:   mov    (%rsp,%rsi,1),%ecx         163:    ecx = rsp[rsi*1]
<+166>:   cmp    $0x1,%ecx                          if(ecx<=1)
<+169>:   jle    0x401183 <phase_6+143>                 goto 143
+171>:   mov    $0x1,%eax                           eax = 1
<+176>:   mov    $0x6032d0,%edx                     edx = 0x6032d0
<+181>:   jmp    0x401176 <phase_6+130>             goto 130
<+183>:   mov    0x20(%rsp),%rbx            183:    rbx = rsp[0x20]
<+188>:   lea    0x28(%rsp),%rax                    rax = &rsp[0x28]
<+193>:   lea    0x50(%rsp),%rsi                    rsi = &rsp[0x50]
<+198>:   mov    %rbx,%rcx                          rcx = rbx
<+201>:   mov    (%rax),%rdx                201:    rdx = *rax
<+204>:   mov    %rdx,0x8(%rcx)                     rcx[0x8] = rdx
<+208>:   add    $0x8,%rax                          rax+=0x8
<+212>:   cmp    %rsi,%rax                          if(rax==rsi)
<+215>:   je     0x4011d2 <phase_6+222>                 goto 222
<+217>:   mov    %rdx,%rcx                          rcx = rdx
<+220>:   jmp    0x4011bd <phase_6+201>             goto 201


<+222>:   movq   $0x0,0x8(%rdx)             222:    rdx[0x8] = 0
<+230>:   mov    $0x5,%ebp                          ebp = 5
<+235>:   mov    0x8(%rbx),%rax                     rax = rbx[0x8]
<+239>:   mov    (%rax),%eax                        eax = *rax
<+241>:   cmp    %eax,(%rbx)                        if(*rbx >= eax)
<+243>:   jge    0x4011ee <phase_6+250>                 goto 250
<+245>:   callq  0x40143a <explode_bomb>            exit()
<+250>:   mov    0x8(%rbx),%rbx             250:    rbx = rbx[0x8]
<+254>:   sub    $0x1,%ebp                          ebp--
<+257>:   jne    0x4011df <phase_6+235>             if(ebp!=0) goto 235




         r13 = rsp
         rsi = rsp
         read_six_numbers()
         r14 = rsp
         r12 = 0
    32:  rbp = r13
         eax = rsp[0]
         eax--
         if(eax<=5)
             goto 52
         exit()
    52:      r12++
         if(r12==6)
             goto  95
         ebx = 1
     65: rax = (int)ebx
         eax = rsp[rax*4]
         if(rsp[0]!=eax)
             goto 81
         exit()
   81:   ebx++
         if(ebx<=5)
             goto 65
         r13+=4
         goto 32
         rsi = &(rsp[0x18])
         rax = rsp

  108:   edx = 7
         edx -= *rax
         *rax = edx
         rax += 4
         if(rax != rsi)
             goto 108
         esi = 0
         goto 163


 130:    rdx = rdx[0x8]
         eax++
         if(eax!=7)
             goto 130
         goto 148
 143:    edx = 0x6032d0
 148:    rsp[20+2*rsi] = rdx
         rsi+=4
         if(rsi==0x18)
             goto 183


 163:    ecx = rsp[rsi*1]
         if(ecx<=1)
             goto 143
         eax = 1
         edx = 0x6032d0
         goto 130


 183:    rbx = rsp[0x20]
         rax = &rsp[0x28]
         rsi = &rsp[0x50]
         rcx = rbx
 201:    rdx = *rax
         rcx[0x8] = rdx
         rax+=0x8
         if(rax==rsi)
             goto 222
         rcx = rdx
         goto 201

 222:    rdx[0x8] = 0

         ebp = 5
 235:    
         if(rbx[0] >= rbx[0x8])
             goto 250
         exit()
 250:    rbx = rbx[0x8]
         ebp--
         if(ebp!=0) goto 235
        return
































